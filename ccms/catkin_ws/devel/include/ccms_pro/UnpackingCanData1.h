// Generated by gencpp from file ccms_pro/UnpackingCanData1.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_UNPACKINGCANDATA1_H
#define CCMS_PRO_MESSAGE_UNPACKINGCANDATA1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct UnpackingCanData1_
{
  typedef UnpackingCanData1_<ContainerAllocator> Type;

  UnpackingCanData1_()
    : id(0)
    , stamp()
    , Module_Voltage(0)
    , Module_Capacitance_Temperature(0)
    , Module_Board_Temperature(0)
    , Module_Voltage_Overvoltage_Abnormal(0)
    , Module_Capacity_Abnormal(0)
    , other_data(0)
    , Module_Voltage_Overvoltage_Warming(0)
    , module_overvolt_abnormal()
    , module_capacity_abnormal()
    , other_data_bit()
    , module_overvolt_warming()  {
    }
  UnpackingCanData1_(const ContainerAllocator& _alloc)
    : id(0)
    , stamp()
    , Module_Voltage(0)
    , Module_Capacitance_Temperature(0)
    , Module_Board_Temperature(0)
    , Module_Voltage_Overvoltage_Abnormal(0)
    , Module_Capacity_Abnormal(0)
    , other_data(0)
    , Module_Voltage_Overvoltage_Warming(0)
    , module_overvolt_abnormal(_alloc)
    , module_capacity_abnormal(_alloc)
    , other_data_bit(_alloc)
    , module_overvolt_warming(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint16_t _Module_Voltage_type;
  _Module_Voltage_type Module_Voltage;

   typedef uint16_t _Module_Capacitance_Temperature_type;
  _Module_Capacitance_Temperature_type Module_Capacitance_Temperature;

   typedef uint16_t _Module_Board_Temperature_type;
  _Module_Board_Temperature_type Module_Board_Temperature;

   typedef uint16_t _Module_Voltage_Overvoltage_Abnormal_type;
  _Module_Voltage_Overvoltage_Abnormal_type Module_Voltage_Overvoltage_Abnormal;

   typedef uint16_t _Module_Capacity_Abnormal_type;
  _Module_Capacity_Abnormal_type Module_Capacity_Abnormal;

   typedef uint16_t _other_data_type;
  _other_data_type other_data;

   typedef uint16_t _Module_Voltage_Overvoltage_Warming_type;
  _Module_Voltage_Overvoltage_Warming_type Module_Voltage_Overvoltage_Warming;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _module_overvolt_abnormal_type;
  _module_overvolt_abnormal_type module_overvolt_abnormal;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _module_capacity_abnormal_type;
  _module_capacity_abnormal_type module_capacity_abnormal;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _other_data_bit_type;
  _other_data_bit_type other_data_bit;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _module_overvolt_warming_type;
  _module_overvolt_warming_type module_overvolt_warming;





  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> const> ConstPtr;

}; // struct UnpackingCanData1_

typedef ::ccms_pro::UnpackingCanData1_<std::allocator<void> > UnpackingCanData1;

typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData1 > UnpackingCanData1Ptr;
typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData1 const> UnpackingCanData1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::UnpackingCanData1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "466f14cb02ad2e790738228bd131528b";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x466f14cb02ad2e79ULL;
  static const uint64_t static_value2 = 0x0738228bd131528bULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/UnpackingCanData1";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
time stamp\n\
uint16 Module_Voltage                                  \n\
uint16 Module_Capacitance_Temperature                        \n\
uint16 Module_Board_Temperature\n\
uint16 Module_Voltage_Overvoltage_Abnormal\n\
uint16 Module_Capacity_Abnormal\n\
uint16 other_data\n\
uint16 Module_Voltage_Overvoltage_Warming                          \n\
uint64[] module_overvolt_abnormal\n\
uint64[] module_capacity_abnormal\n\
uint64[] other_data_bit\n\
uint64[] module_overvolt_warming\n\
";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.stamp);
      stream.next(m.Module_Voltage);
      stream.next(m.Module_Capacitance_Temperature);
      stream.next(m.Module_Board_Temperature);
      stream.next(m.Module_Voltage_Overvoltage_Abnormal);
      stream.next(m.Module_Capacity_Abnormal);
      stream.next(m.other_data);
      stream.next(m.Module_Voltage_Overvoltage_Warming);
      stream.next(m.module_overvolt_abnormal);
      stream.next(m.module_capacity_abnormal);
      stream.next(m.other_data_bit);
      stream.next(m.module_overvolt_warming);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnpackingCanData1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::UnpackingCanData1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::UnpackingCanData1_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "Module_Voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Voltage);
    s << indent << "Module_Capacitance_Temperature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Capacitance_Temperature);
    s << indent << "Module_Board_Temperature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Board_Temperature);
    s << indent << "Module_Voltage_Overvoltage_Abnormal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Voltage_Overvoltage_Abnormal);
    s << indent << "Module_Capacity_Abnormal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Capacity_Abnormal);
    s << indent << "other_data: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.other_data);
    s << indent << "Module_Voltage_Overvoltage_Warming: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Module_Voltage_Overvoltage_Warming);
    s << indent << "module_overvolt_abnormal[]" << std::endl;
    for (size_t i = 0; i < v.module_overvolt_abnormal.size(); ++i)
    {
      s << indent << "  module_overvolt_abnormal[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.module_overvolt_abnormal[i]);
    }
    s << indent << "module_capacity_abnormal[]" << std::endl;
    for (size_t i = 0; i < v.module_capacity_abnormal.size(); ++i)
    {
      s << indent << "  module_capacity_abnormal[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.module_capacity_abnormal[i]);
    }
    s << indent << "other_data_bit[]" << std::endl;
    for (size_t i = 0; i < v.other_data_bit.size(); ++i)
    {
      s << indent << "  other_data_bit[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.other_data_bit[i]);
    }
    s << indent << "module_overvolt_warming[]" << std::endl;
    for (size_t i = 0; i < v.module_overvolt_warming.size(); ++i)
    {
      s << indent << "  module_overvolt_warming[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.module_overvolt_warming[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_UNPACKINGCANDATA1_H
