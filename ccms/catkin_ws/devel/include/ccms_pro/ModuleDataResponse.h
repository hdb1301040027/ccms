// Generated by gencpp from file ccms_pro/ModuleDataResponse.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_MODULEDATARESPONSE_H
#define CCMS_PRO_MESSAGE_MODULEDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct ModuleDataResponse_
{
  typedef ModuleDataResponse_<ContainerAllocator> Type;

  ModuleDataResponse_()
    : HEnergy()
    , HModule()
    , HBlock()
    , HModule_Average()
    , HError()  {
    }
  ModuleDataResponse_(const ContainerAllocator& _alloc)
    : HEnergy(_alloc)
    , HModule(_alloc)
    , HBlock(_alloc)
    , HModule_Average(_alloc)
    , HError(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HEnergy_type;
  _HEnergy_type HEnergy;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HModule_type;
  _HModule_type HModule;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HBlock_type;
  _HBlock_type HBlock;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HModule_Average_type;
  _HModule_Average_type HModule_Average;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HError_type;
  _HError_type HError;





  typedef boost::shared_ptr< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleDataResponse_

typedef ::ccms_pro::ModuleDataResponse_<std::allocator<void> > ModuleDataResponse;

typedef boost::shared_ptr< ::ccms_pro::ModuleDataResponse > ModuleDataResponsePtr;
typedef boost::shared_ptr< ::ccms_pro::ModuleDataResponse const> ModuleDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::ModuleDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8539b3fe1930eae836cb2fe27dda036b";
  }

  static const char* value(const ::ccms_pro::ModuleDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8539b3fe1930eae8ULL;
  static const uint64_t static_value2 = 0x36cb2fe27dda036bULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/ModuleDataResponse";
  }

  static const char* value(const ::ccms_pro::ModuleDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] HEnergy\n\
float64[] HModule\n\
float64[] HBlock\n\
float64[] HModule_Average\n\
float64[] HError\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::ccms_pro::ModuleDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.HEnergy);
      stream.next(m.HModule);
      stream.next(m.HBlock);
      stream.next(m.HModule_Average);
      stream.next(m.HError);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::ModuleDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::ModuleDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "HEnergy[]" << std::endl;
    for (size_t i = 0; i < v.HEnergy.size(); ++i)
    {
      s << indent << "  HEnergy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HEnergy[i]);
    }
    s << indent << "HModule[]" << std::endl;
    for (size_t i = 0; i < v.HModule.size(); ++i)
    {
      s << indent << "  HModule[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HModule[i]);
    }
    s << indent << "HBlock[]" << std::endl;
    for (size_t i = 0; i < v.HBlock.size(); ++i)
    {
      s << indent << "  HBlock[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HBlock[i]);
    }
    s << indent << "HModule_Average[]" << std::endl;
    for (size_t i = 0; i < v.HModule_Average.size(); ++i)
    {
      s << indent << "  HModule_Average[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HModule_Average[i]);
    }
    s << indent << "HError[]" << std::endl;
    for (size_t i = 0; i < v.HError.size(); ++i)
    {
      s << indent << "  HError[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HError[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_MODULEDATARESPONSE_H
