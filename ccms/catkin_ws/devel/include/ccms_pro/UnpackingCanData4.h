// Generated by gencpp from file ccms_pro/UnpackingCanData4.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_UNPACKINGCANDATA4_H
#define CCMS_PRO_MESSAGE_UNPACKINGCANDATA4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct UnpackingCanData4_
{
  typedef UnpackingCanData4_<ContainerAllocator> Type;

  UnpackingCanData4_()
    : id(0)
    , stamp()
    , Undervoltage_Warning(0)
    , Internal_Resistance_Abnormality(0)
    , other_data(0)
    , Voltage_Equalization_State(0)
    , Undervoltage_Alarm(0)
    , Low_Voltage_Alarm(0)
    , Software_version_Number(0)
    , Software_Minor_version_Number(0)
    , undervolt_warning()
    , resistance_abnormality()
    , Other_data()
    , voltage_equal_state()
    , undervolt_alarm()
    , low_volt_alarm()  {
    }
  UnpackingCanData4_(const ContainerAllocator& _alloc)
    : id(0)
    , stamp()
    , Undervoltage_Warning(0)
    , Internal_Resistance_Abnormality(0)
    , other_data(0)
    , Voltage_Equalization_State(0)
    , Undervoltage_Alarm(0)
    , Low_Voltage_Alarm(0)
    , Software_version_Number(0)
    , Software_Minor_version_Number(0)
    , undervolt_warning(_alloc)
    , resistance_abnormality(_alloc)
    , Other_data(_alloc)
    , voltage_equal_state(_alloc)
    , undervolt_alarm(_alloc)
    , low_volt_alarm(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint16_t _Undervoltage_Warning_type;
  _Undervoltage_Warning_type Undervoltage_Warning;

   typedef uint16_t _Internal_Resistance_Abnormality_type;
  _Internal_Resistance_Abnormality_type Internal_Resistance_Abnormality;

   typedef uint16_t _other_data_type;
  _other_data_type other_data;

   typedef uint16_t _Voltage_Equalization_State_type;
  _Voltage_Equalization_State_type Voltage_Equalization_State;

   typedef uint16_t _Undervoltage_Alarm_type;
  _Undervoltage_Alarm_type Undervoltage_Alarm;

   typedef uint16_t _Low_Voltage_Alarm_type;
  _Low_Voltage_Alarm_type Low_Voltage_Alarm;

   typedef uint16_t _Software_version_Number_type;
  _Software_version_Number_type Software_version_Number;

   typedef uint16_t _Software_Minor_version_Number_type;
  _Software_Minor_version_Number_type Software_Minor_version_Number;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _undervolt_warning_type;
  _undervolt_warning_type undervolt_warning;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _resistance_abnormality_type;
  _resistance_abnormality_type resistance_abnormality;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _Other_data_type;
  _Other_data_type Other_data;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _voltage_equal_state_type;
  _voltage_equal_state_type voltage_equal_state;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _undervolt_alarm_type;
  _undervolt_alarm_type undervolt_alarm;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _low_volt_alarm_type;
  _low_volt_alarm_type low_volt_alarm;





  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> const> ConstPtr;

}; // struct UnpackingCanData4_

typedef ::ccms_pro::UnpackingCanData4_<std::allocator<void> > UnpackingCanData4;

typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData4 > UnpackingCanData4Ptr;
typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData4 const> UnpackingCanData4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::UnpackingCanData4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a980592c413b8d0742886b4d0e323c8b";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa980592c413b8d07ULL;
  static const uint64_t static_value2 = 0x42886b4d0e323c8bULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/UnpackingCanData4";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
time stamp\n\
uint16 Undervoltage_Warning\n\
uint16 Internal_Resistance_Abnormality\n\
uint16 other_data\n\
uint16 Voltage_Equalization_State\n\
uint16 Undervoltage_Alarm\n\
uint16 Low_Voltage_Alarm\n\
uint16 Software_version_Number\n\
uint16 Software_Minor_version_Number\n\
uint64[] undervolt_warning\n\
uint64[] resistance_abnormality\n\
uint64[] Other_data\n\
uint64[] voltage_equal_state\n\
uint64[] undervolt_alarm\n\
uint64[] low_volt_alarm\n\
";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.stamp);
      stream.next(m.Undervoltage_Warning);
      stream.next(m.Internal_Resistance_Abnormality);
      stream.next(m.other_data);
      stream.next(m.Voltage_Equalization_State);
      stream.next(m.Undervoltage_Alarm);
      stream.next(m.Low_Voltage_Alarm);
      stream.next(m.Software_version_Number);
      stream.next(m.Software_Minor_version_Number);
      stream.next(m.undervolt_warning);
      stream.next(m.resistance_abnormality);
      stream.next(m.Other_data);
      stream.next(m.voltage_equal_state);
      stream.next(m.undervolt_alarm);
      stream.next(m.low_volt_alarm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnpackingCanData4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::UnpackingCanData4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::UnpackingCanData4_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "Undervoltage_Warning: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Undervoltage_Warning);
    s << indent << "Internal_Resistance_Abnormality: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Internal_Resistance_Abnormality);
    s << indent << "other_data: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.other_data);
    s << indent << "Voltage_Equalization_State: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Voltage_Equalization_State);
    s << indent << "Undervoltage_Alarm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Undervoltage_Alarm);
    s << indent << "Low_Voltage_Alarm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Low_Voltage_Alarm);
    s << indent << "Software_version_Number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Software_version_Number);
    s << indent << "Software_Minor_version_Number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Software_Minor_version_Number);
    s << indent << "undervolt_warning[]" << std::endl;
    for (size_t i = 0; i < v.undervolt_warning.size(); ++i)
    {
      s << indent << "  undervolt_warning[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.undervolt_warning[i]);
    }
    s << indent << "resistance_abnormality[]" << std::endl;
    for (size_t i = 0; i < v.resistance_abnormality.size(); ++i)
    {
      s << indent << "  resistance_abnormality[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.resistance_abnormality[i]);
    }
    s << indent << "Other_data[]" << std::endl;
    for (size_t i = 0; i < v.Other_data.size(); ++i)
    {
      s << indent << "  Other_data[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.Other_data[i]);
    }
    s << indent << "voltage_equal_state[]" << std::endl;
    for (size_t i = 0; i < v.voltage_equal_state.size(); ++i)
    {
      s << indent << "  voltage_equal_state[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.voltage_equal_state[i]);
    }
    s << indent << "undervolt_alarm[]" << std::endl;
    for (size_t i = 0; i < v.undervolt_alarm.size(); ++i)
    {
      s << indent << "  undervolt_alarm[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.undervolt_alarm[i]);
    }
    s << indent << "low_volt_alarm[]" << std::endl;
    for (size_t i = 0; i < v.low_volt_alarm.size(); ++i)
    {
      s << indent << "  low_volt_alarm[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.low_volt_alarm[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_UNPACKINGCANDATA4_H
