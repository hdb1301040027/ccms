// Generated by gencpp from file ccms_pro/ModuleDataRequest.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_MODULEDATAREQUEST_H
#define CCMS_PRO_MESSAGE_MODULEDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct ModuleDataRequest_
{
  typedef ModuleDataRequest_<ContainerAllocator> Type;

  ModuleDataRequest_()
    : ErrorTypeID(0)
    , powerID(0)
    , moduleID(0)
    , blockID(0)
    , StartStamp(0.0)
    , EndStamp(0.0)  {
    }
  ModuleDataRequest_(const ContainerAllocator& _alloc)
    : ErrorTypeID(0)
    , powerID(0)
    , moduleID(0)
    , blockID(0)
    , StartStamp(0.0)
    , EndStamp(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _ErrorTypeID_type;
  _ErrorTypeID_type ErrorTypeID;

   typedef uint64_t _powerID_type;
  _powerID_type powerID;

   typedef uint64_t _moduleID_type;
  _moduleID_type moduleID;

   typedef uint64_t _blockID_type;
  _blockID_type blockID;

   typedef double _StartStamp_type;
  _StartStamp_type StartStamp;

   typedef double _EndStamp_type;
  _EndStamp_type EndStamp;





  typedef boost::shared_ptr< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleDataRequest_

typedef ::ccms_pro::ModuleDataRequest_<std::allocator<void> > ModuleDataRequest;

typedef boost::shared_ptr< ::ccms_pro::ModuleDataRequest > ModuleDataRequestPtr;
typedef boost::shared_ptr< ::ccms_pro::ModuleDataRequest const> ModuleDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::ModuleDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "141a9d2900bbeb91e25550df5cf06b14";
  }

  static const char* value(const ::ccms_pro::ModuleDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x141a9d2900bbeb91ULL;
  static const uint64_t static_value2 = 0xe25550df5cf06b14ULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/ModuleDataRequest";
  }

  static const char* value(const ::ccms_pro::ModuleDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 ErrorTypeID\n\
uint64 powerID\n\
uint64 moduleID\n\
uint64 blockID\n\
float64 StartStamp\n\
float64 EndStamp\n\
";
  }

  static const char* value(const ::ccms_pro::ModuleDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ErrorTypeID);
      stream.next(m.powerID);
      stream.next(m.moduleID);
      stream.next(m.blockID);
      stream.next(m.StartStamp);
      stream.next(m.EndStamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::ModuleDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::ModuleDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "ErrorTypeID: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.ErrorTypeID);
    s << indent << "powerID: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.powerID);
    s << indent << "moduleID: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.moduleID);
    s << indent << "blockID: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.blockID);
    s << indent << "StartStamp: ";
    Printer<double>::stream(s, indent + "  ", v.StartStamp);
    s << indent << "EndStamp: ";
    Printer<double>::stream(s, indent + "  ", v.EndStamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_MODULEDATAREQUEST_H
