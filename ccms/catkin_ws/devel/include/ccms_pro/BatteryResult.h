// Generated by gencpp from file ccms_pro/BatteryResult.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_BATTERYRESULT_H
#define CCMS_PRO_MESSAGE_BATTERYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct BatteryResult_
{
  typedef BatteryResult_<ContainerAllocator> Type;

  BatteryResult_()
    : batteryID(0)
    , batteryhealth(0)
    , stamp()  {
    }
  BatteryResult_(const ContainerAllocator& _alloc)
    : batteryID(0)
    , batteryhealth(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef int16_t _batteryID_type;
  _batteryID_type batteryID;

   typedef int16_t _batteryhealth_type;
  _batteryhealth_type batteryhealth;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::ccms_pro::BatteryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::BatteryResult_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryResult_

typedef ::ccms_pro::BatteryResult_<std::allocator<void> > BatteryResult;

typedef boost::shared_ptr< ::ccms_pro::BatteryResult > BatteryResultPtr;
typedef boost::shared_ptr< ::ccms_pro::BatteryResult const> BatteryResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::BatteryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::BatteryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::BatteryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::BatteryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::BatteryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::BatteryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::BatteryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::BatteryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::BatteryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e42e7886af1941bd1e452f49878265cf";
  }

  static const char* value(const ::ccms_pro::BatteryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe42e7886af1941bdULL;
  static const uint64_t static_value2 = 0x1e452f49878265cfULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::BatteryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/BatteryResult";
  }

  static const char* value(const ::ccms_pro::BatteryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::BatteryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 batteryID\n\
int16 batteryhealth \n\
time stamp\n\
";
  }

  static const char* value(const ::ccms_pro::BatteryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::BatteryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.batteryID);
      stream.next(m.batteryhealth);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::BatteryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::BatteryResult_<ContainerAllocator>& v)
  {
    s << indent << "batteryID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.batteryID);
    s << indent << "batteryhealth: ";
    Printer<int16_t>::stream(s, indent + "  ", v.batteryhealth);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_BATTERYRESULT_H
