// Generated by gencpp from file ccms_pro/UnpackingCanData6.msg
// DO NOT EDIT!


#ifndef CCMS_PRO_MESSAGE_UNPACKINGCANDATA6_H
#define CCMS_PRO_MESSAGE_UNPACKINGCANDATA6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccms_pro
{
template <class ContainerAllocator>
struct UnpackingCanData6_
{
  typedef UnpackingCanData6_<ContainerAllocator> Type;

  UnpackingCanData6_()
    : Power_ID(0)
    , stamp()
    , Energy_Storage_Voltage(0)
    , Energy_Storage_Current(0)
    , Energy_Storage_Temperature(0)
    , other_data(0)
    , Fan_Failure(0)
    , Fan_State(0)
    , otherdata()
    , FanAccident()
    , Fandata()  {
    }
  UnpackingCanData6_(const ContainerAllocator& _alloc)
    : Power_ID(0)
    , stamp()
    , Energy_Storage_Voltage(0)
    , Energy_Storage_Current(0)
    , Energy_Storage_Temperature(0)
    , other_data(0)
    , Fan_Failure(0)
    , Fan_State(0)
    , otherdata(_alloc)
    , FanAccident(_alloc)
    , Fandata(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _Power_ID_type;
  _Power_ID_type Power_ID;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint16_t _Energy_Storage_Voltage_type;
  _Energy_Storage_Voltage_type Energy_Storage_Voltage;

   typedef int16_t _Energy_Storage_Current_type;
  _Energy_Storage_Current_type Energy_Storage_Current;

   typedef uint16_t _Energy_Storage_Temperature_type;
  _Energy_Storage_Temperature_type Energy_Storage_Temperature;

   typedef uint16_t _other_data_type;
  _other_data_type other_data;

   typedef uint16_t _Fan_Failure_type;
  _Fan_Failure_type Fan_Failure;

   typedef uint16_t _Fan_State_type;
  _Fan_State_type Fan_State;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _otherdata_type;
  _otherdata_type otherdata;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _FanAccident_type;
  _FanAccident_type FanAccident;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _Fandata_type;
  _Fandata_type Fandata;





  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> const> ConstPtr;

}; // struct UnpackingCanData6_

typedef ::ccms_pro::UnpackingCanData6_<std::allocator<void> > UnpackingCanData6;

typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData6 > UnpackingCanData6Ptr;
typedef boost::shared_ptr< ::ccms_pro::UnpackingCanData6 const> UnpackingCanData6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccms_pro::UnpackingCanData6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccms_pro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ccms_pro': ['/home/ubuntu/ccms/catkin_ws/src/ccms_pro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa4a7278a5166952b8bdd122eb47f2f6";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa4a7278a5166952ULL;
  static const uint64_t static_value2 = 0xb8bdd122eb47f2f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccms_pro/UnpackingCanData6";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 Power_ID\n\
time stamp\n\
uint16 Energy_Storage_Voltage\n\
int16 Energy_Storage_Current\n\
uint16 Energy_Storage_Temperature\n\
uint16 other_data\n\
uint16 Fan_Failure\n\
uint16 Fan_State\n\
uint64[] otherdata\n\
uint64[] FanAccident\n\
uint64[] Fandata\n\
\n\
";
  }

  static const char* value(const ::ccms_pro::UnpackingCanData6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Power_ID);
      stream.next(m.stamp);
      stream.next(m.Energy_Storage_Voltage);
      stream.next(m.Energy_Storage_Current);
      stream.next(m.Energy_Storage_Temperature);
      stream.next(m.other_data);
      stream.next(m.Fan_Failure);
      stream.next(m.Fan_State);
      stream.next(m.otherdata);
      stream.next(m.FanAccident);
      stream.next(m.Fandata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnpackingCanData6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccms_pro::UnpackingCanData6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccms_pro::UnpackingCanData6_<ContainerAllocator>& v)
  {
    s << indent << "Power_ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Power_ID);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "Energy_Storage_Voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Energy_Storage_Voltage);
    s << indent << "Energy_Storage_Current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Energy_Storage_Current);
    s << indent << "Energy_Storage_Temperature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Energy_Storage_Temperature);
    s << indent << "other_data: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.other_data);
    s << indent << "Fan_Failure: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Fan_Failure);
    s << indent << "Fan_State: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Fan_State);
    s << indent << "otherdata[]" << std::endl;
    for (size_t i = 0; i < v.otherdata.size(); ++i)
    {
      s << indent << "  otherdata[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.otherdata[i]);
    }
    s << indent << "FanAccident[]" << std::endl;
    for (size_t i = 0; i < v.FanAccident.size(); ++i)
    {
      s << indent << "  FanAccident[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.FanAccident[i]);
    }
    s << indent << "Fandata[]" << std::endl;
    for (size_t i = 0; i < v.Fandata.size(); ++i)
    {
      s << indent << "  Fandata[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.Fandata[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMS_PRO_MESSAGE_UNPACKINGCANDATA6_H
