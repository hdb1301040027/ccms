# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccms_pro/UnpackingCanData1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class UnpackingCanData1(genpy.Message):
  _md5sum = "466f14cb02ad2e790738228bd131528b"
  _type = "ccms_pro/UnpackingCanData1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
time stamp
uint16 Module_Voltage                                  
uint16 Module_Capacitance_Temperature                        
uint16 Module_Board_Temperature
uint16 Module_Voltage_Overvoltage_Abnormal
uint16 Module_Capacity_Abnormal
uint16 other_data
uint16 Module_Voltage_Overvoltage_Warming                          
uint64[] module_overvolt_abnormal
uint64[] module_capacity_abnormal
uint64[] other_data_bit
uint64[] module_overvolt_warming
"""
  __slots__ = ['id','stamp','Module_Voltage','Module_Capacitance_Temperature','Module_Board_Temperature','Module_Voltage_Overvoltage_Abnormal','Module_Capacity_Abnormal','other_data','Module_Voltage_Overvoltage_Warming','module_overvolt_abnormal','module_capacity_abnormal','other_data_bit','module_overvolt_warming']
  _slot_types = ['uint32','time','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint64[]','uint64[]','uint64[]','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,stamp,Module_Voltage,Module_Capacitance_Temperature,Module_Board_Temperature,Module_Voltage_Overvoltage_Abnormal,Module_Capacity_Abnormal,other_data,Module_Voltage_Overvoltage_Warming,module_overvolt_abnormal,module_capacity_abnormal,other_data_bit,module_overvolt_warming

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnpackingCanData1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.Module_Voltage is None:
        self.Module_Voltage = 0
      if self.Module_Capacitance_Temperature is None:
        self.Module_Capacitance_Temperature = 0
      if self.Module_Board_Temperature is None:
        self.Module_Board_Temperature = 0
      if self.Module_Voltage_Overvoltage_Abnormal is None:
        self.Module_Voltage_Overvoltage_Abnormal = 0
      if self.Module_Capacity_Abnormal is None:
        self.Module_Capacity_Abnormal = 0
      if self.other_data is None:
        self.other_data = 0
      if self.Module_Voltage_Overvoltage_Warming is None:
        self.Module_Voltage_Overvoltage_Warming = 0
      if self.module_overvolt_abnormal is None:
        self.module_overvolt_abnormal = []
      if self.module_capacity_abnormal is None:
        self.module_capacity_abnormal = []
      if self.other_data_bit is None:
        self.other_data_bit = []
      if self.module_overvolt_warming is None:
        self.module_overvolt_warming = []
    else:
      self.id = 0
      self.stamp = genpy.Time()
      self.Module_Voltage = 0
      self.Module_Capacitance_Temperature = 0
      self.Module_Board_Temperature = 0
      self.Module_Voltage_Overvoltage_Abnormal = 0
      self.Module_Capacity_Abnormal = 0
      self.other_data = 0
      self.Module_Voltage_Overvoltage_Warming = 0
      self.module_overvolt_abnormal = []
      self.module_capacity_abnormal = []
      self.other_data_bit = []
      self.module_overvolt_warming = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I7H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Module_Voltage, _x.Module_Capacitance_Temperature, _x.Module_Board_Temperature, _x.Module_Voltage_Overvoltage_Abnormal, _x.Module_Capacity_Abnormal, _x.other_data, _x.Module_Voltage_Overvoltage_Warming))
      length = len(self.module_overvolt_abnormal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.module_overvolt_abnormal))
      length = len(self.module_capacity_abnormal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.module_capacity_abnormal))
      length = len(self.other_data_bit)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.other_data_bit))
      length = len(self.module_overvolt_warming)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.module_overvolt_warming))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Module_Voltage, _x.Module_Capacitance_Temperature, _x.Module_Board_Temperature, _x.Module_Voltage_Overvoltage_Abnormal, _x.Module_Capacity_Abnormal, _x.other_data, _x.Module_Voltage_Overvoltage_Warming,) = _get_struct_3I7H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_overvolt_abnormal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_capacity_abnormal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.other_data_bit = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_overvolt_warming = struct.unpack(pattern, str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I7H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Module_Voltage, _x.Module_Capacitance_Temperature, _x.Module_Board_Temperature, _x.Module_Voltage_Overvoltage_Abnormal, _x.Module_Capacity_Abnormal, _x.other_data, _x.Module_Voltage_Overvoltage_Warming))
      length = len(self.module_overvolt_abnormal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.module_overvolt_abnormal.tostring())
      length = len(self.module_capacity_abnormal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.module_capacity_abnormal.tostring())
      length = len(self.other_data_bit)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.other_data_bit.tostring())
      length = len(self.module_overvolt_warming)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.module_overvolt_warming.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Module_Voltage, _x.Module_Capacitance_Temperature, _x.Module_Board_Temperature, _x.Module_Voltage_Overvoltage_Abnormal, _x.Module_Capacity_Abnormal, _x.other_data, _x.Module_Voltage_Overvoltage_Warming,) = _get_struct_3I7H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_overvolt_abnormal = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_capacity_abnormal = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.other_data_bit = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.module_overvolt_warming = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I7H = None
def _get_struct_3I7H():
    global _struct_3I7H
    if _struct_3I7H is None:
        _struct_3I7H = struct.Struct("<3I7H")
    return _struct_3I7H
