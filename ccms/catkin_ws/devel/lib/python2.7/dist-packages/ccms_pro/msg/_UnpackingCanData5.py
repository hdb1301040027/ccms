# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccms_pro/UnpackingCanData5.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class UnpackingCanData5(genpy.Message):
  _md5sum = "dad6dfeec14d9e6f97f8da55bee54242"
  _type = "ccms_pro/UnpackingCanData5"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
time stamp
uint16 Balanced_data_number
uint16 Modules_Above_Threshold_Voltage
uint16 Moduel_Average_Voltage
uint16 Module_Voltage_Threshold
uint16 Minimum_Module_Voltage
"""
  __slots__ = ['id','stamp','Balanced_data_number','Modules_Above_Threshold_Voltage','Moduel_Average_Voltage','Module_Voltage_Threshold','Minimum_Module_Voltage']
  _slot_types = ['uint32','time','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,stamp,Balanced_data_number,Modules_Above_Threshold_Voltage,Moduel_Average_Voltage,Module_Voltage_Threshold,Minimum_Module_Voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnpackingCanData5, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.Balanced_data_number is None:
        self.Balanced_data_number = 0
      if self.Modules_Above_Threshold_Voltage is None:
        self.Modules_Above_Threshold_Voltage = 0
      if self.Moduel_Average_Voltage is None:
        self.Moduel_Average_Voltage = 0
      if self.Module_Voltage_Threshold is None:
        self.Module_Voltage_Threshold = 0
      if self.Minimum_Module_Voltage is None:
        self.Minimum_Module_Voltage = 0
    else:
      self.id = 0
      self.stamp = genpy.Time()
      self.Balanced_data_number = 0
      self.Modules_Above_Threshold_Voltage = 0
      self.Moduel_Average_Voltage = 0
      self.Module_Voltage_Threshold = 0
      self.Minimum_Module_Voltage = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I5H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Balanced_data_number, _x.Modules_Above_Threshold_Voltage, _x.Moduel_Average_Voltage, _x.Module_Voltage_Threshold, _x.Minimum_Module_Voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Balanced_data_number, _x.Modules_Above_Threshold_Voltage, _x.Moduel_Average_Voltage, _x.Module_Voltage_Threshold, _x.Minimum_Module_Voltage,) = _get_struct_3I5H().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I5H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Balanced_data_number, _x.Modules_Above_Threshold_Voltage, _x.Moduel_Average_Voltage, _x.Module_Voltage_Threshold, _x.Minimum_Module_Voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Balanced_data_number, _x.Modules_Above_Threshold_Voltage, _x.Moduel_Average_Voltage, _x.Module_Voltage_Threshold, _x.Minimum_Module_Voltage,) = _get_struct_3I5H().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I5H = None
def _get_struct_3I5H():
    global _struct_3I5H
    if _struct_3I5H is None:
        _struct_3I5H = struct.Struct("<3I5H")
    return _struct_3I5H
