# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccms_pro/UnpackingCanData4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class UnpackingCanData4(genpy.Message):
  _md5sum = "a980592c413b8d0742886b4d0e323c8b"
  _type = "ccms_pro/UnpackingCanData4"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
time stamp
uint16 Undervoltage_Warning
uint16 Internal_Resistance_Abnormality
uint16 other_data
uint16 Voltage_Equalization_State
uint16 Undervoltage_Alarm
uint16 Low_Voltage_Alarm
uint16 Software_version_Number
uint16 Software_Minor_version_Number
uint64[] undervolt_warning
uint64[] resistance_abnormality
uint64[] Other_data
uint64[] voltage_equal_state
uint64[] undervolt_alarm
uint64[] low_volt_alarm
"""
  __slots__ = ['id','stamp','Undervoltage_Warning','Internal_Resistance_Abnormality','other_data','Voltage_Equalization_State','Undervoltage_Alarm','Low_Voltage_Alarm','Software_version_Number','Software_Minor_version_Number','undervolt_warning','resistance_abnormality','Other_data','voltage_equal_state','undervolt_alarm','low_volt_alarm']
  _slot_types = ['uint32','time','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint64[]','uint64[]','uint64[]','uint64[]','uint64[]','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,stamp,Undervoltage_Warning,Internal_Resistance_Abnormality,other_data,Voltage_Equalization_State,Undervoltage_Alarm,Low_Voltage_Alarm,Software_version_Number,Software_Minor_version_Number,undervolt_warning,resistance_abnormality,Other_data,voltage_equal_state,undervolt_alarm,low_volt_alarm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnpackingCanData4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.Undervoltage_Warning is None:
        self.Undervoltage_Warning = 0
      if self.Internal_Resistance_Abnormality is None:
        self.Internal_Resistance_Abnormality = 0
      if self.other_data is None:
        self.other_data = 0
      if self.Voltage_Equalization_State is None:
        self.Voltage_Equalization_State = 0
      if self.Undervoltage_Alarm is None:
        self.Undervoltage_Alarm = 0
      if self.Low_Voltage_Alarm is None:
        self.Low_Voltage_Alarm = 0
      if self.Software_version_Number is None:
        self.Software_version_Number = 0
      if self.Software_Minor_version_Number is None:
        self.Software_Minor_version_Number = 0
      if self.undervolt_warning is None:
        self.undervolt_warning = []
      if self.resistance_abnormality is None:
        self.resistance_abnormality = []
      if self.Other_data is None:
        self.Other_data = []
      if self.voltage_equal_state is None:
        self.voltage_equal_state = []
      if self.undervolt_alarm is None:
        self.undervolt_alarm = []
      if self.low_volt_alarm is None:
        self.low_volt_alarm = []
    else:
      self.id = 0
      self.stamp = genpy.Time()
      self.Undervoltage_Warning = 0
      self.Internal_Resistance_Abnormality = 0
      self.other_data = 0
      self.Voltage_Equalization_State = 0
      self.Undervoltage_Alarm = 0
      self.Low_Voltage_Alarm = 0
      self.Software_version_Number = 0
      self.Software_Minor_version_Number = 0
      self.undervolt_warning = []
      self.resistance_abnormality = []
      self.Other_data = []
      self.voltage_equal_state = []
      self.undervolt_alarm = []
      self.low_volt_alarm = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I8H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Undervoltage_Warning, _x.Internal_Resistance_Abnormality, _x.other_data, _x.Voltage_Equalization_State, _x.Undervoltage_Alarm, _x.Low_Voltage_Alarm, _x.Software_version_Number, _x.Software_Minor_version_Number))
      length = len(self.undervolt_warning)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.undervolt_warning))
      length = len(self.resistance_abnormality)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.resistance_abnormality))
      length = len(self.Other_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.Other_data))
      length = len(self.voltage_equal_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.voltage_equal_state))
      length = len(self.undervolt_alarm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.undervolt_alarm))
      length = len(self.low_volt_alarm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.low_volt_alarm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Undervoltage_Warning, _x.Internal_Resistance_Abnormality, _x.other_data, _x.Voltage_Equalization_State, _x.Undervoltage_Alarm, _x.Low_Voltage_Alarm, _x.Software_version_Number, _x.Software_Minor_version_Number,) = _get_struct_3I8H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.undervolt_warning = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.resistance_abnormality = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.Other_data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_equal_state = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.undervolt_alarm = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.low_volt_alarm = struct.unpack(pattern, str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I8H().pack(_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Undervoltage_Warning, _x.Internal_Resistance_Abnormality, _x.other_data, _x.Voltage_Equalization_State, _x.Undervoltage_Alarm, _x.Low_Voltage_Alarm, _x.Software_version_Number, _x.Software_Minor_version_Number))
      length = len(self.undervolt_warning)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.undervolt_warning.tostring())
      length = len(self.resistance_abnormality)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.resistance_abnormality.tostring())
      length = len(self.Other_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.Other_data.tostring())
      length = len(self.voltage_equal_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.voltage_equal_state.tostring())
      length = len(self.undervolt_alarm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.undervolt_alarm.tostring())
      length = len(self.low_volt_alarm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.low_volt_alarm.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.stamp.secs, _x.stamp.nsecs, _x.Undervoltage_Warning, _x.Internal_Resistance_Abnormality, _x.other_data, _x.Voltage_Equalization_State, _x.Undervoltage_Alarm, _x.Low_Voltage_Alarm, _x.Software_version_Number, _x.Software_Minor_version_Number,) = _get_struct_3I8H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.undervolt_warning = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.resistance_abnormality = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.Other_data = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_equal_state = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.undervolt_alarm = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.low_volt_alarm = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I8H = None
def _get_struct_3I8H():
    global _struct_3I8H
    if _struct_3I8H is None:
        _struct_3I8H = struct.Struct("<3I8H")
    return _struct_3I8H
